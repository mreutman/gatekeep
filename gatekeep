#!/usr/bin/env python3
# depends: python3-crypto

import sys
import base64
import hashlib
from getpass import getpass
from Crypto import Random
from Crypto.Cipher import AES

_version_major = 0
_version_minor = 1
_version_patch = 0

class AESCipher(object):

    def __init__(self, key):
        self.bs = 32
        self.key = hashlib.sha256(key.encode()).digest()

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw)).decode("utf-8")

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        r = s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)
        return r

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

class Gatekeep(object):

    def __init__(self, master_key):
        self.master_key = master_key
        self.cipher = AESCipher(master_key)

    def create(self):
        print("Creating gatekeep, verify password...")
        verify = getpass()
        if verify == self.master_key:
            f = open(__file__, "a")
            line = "#$ " + self.cipher.encrypt(self.master_key) + "\n"
            f.write(line)
            f.close()
        else:
            print("Failed to verify")

    def write_key(self):
        f = self._open_and_verify()
        # no exception, close read access to file
        f.close()
        web = input("Web: ")
        user = input("User: ")
        key = input("Pass: ")

        # use spaces as separators
        clear = web + " " + user + " " + key

        enc = "# " + self.cipher.encrypt(clear) + "\n"
        f = open(__file__, "a")
        f.write(enc)
        f.close()
        print("Added entry for " + web)

    def read_key(self, web):
        f = self._open_and_verify()
        eof = False
        while not eof:
            line = f.readline()
            if line == "":
                eof = True
            else:
                enc = line.split()[1]
                dec = self.cipher.decrypt(enc).split()
                if dec[0] == web:
                    print(dec[0] + " " + dec[1] + " " + dec[2])

    def all_keys(self):
        f = self._open_and_verify()
        eof = False
        while not eof:
            line = f.readline()
            if line == "":
                eof = True
            else:
                enc = line.split()[1]
                dec = self.cipher.decrypt(enc)
                print(dec)

    def _open_and_verify(self):
        f = open(__file__, "r")
        match = self.master_key
        line = ""
        eof = False
        while not line.startswith("#$ ") and not eof:
            line = f.readline()
            if line == "":
                eof = True
        if eof:
            raise Exception("No master pass found")

        enc = line.split()[1]
        dec = self.cipher.decrypt(enc)
        if dec != match:
            raise Exception("Invalid master pass")

        return f

def print_help():
    print("Usage: gatekeep [OPTION]")
    print("Options:")
    print("  -a\t\tdisplay all keys")
    print("  -c\t\tcreate new gatekeep")
    print("  -r [WEB]\tread pass for website")
    print("  -w\t\twrite new pass for website")
    print("  -v\t\tdisplay version")

if __name__ == "__main__":
    # not really a good approach, but it works....
    args = ["-a", "-c", "-r", "-w", "-v"]
    
    if len(sys.argv) == 1 or sys.argv[1] not in args:
        print_help()

    elif sys.argv[1] == "-v":
        v = str(_version_major) + "." + \
            str(_version_minor) + "." + \
            str(_version_patch)
        print("gatekeep " + v)

    else:
        master_key = getpass()
        g = Gatekeep(master_key)

        if sys.argv[1] == "-a":
            g.all_keys()

        elif sys.argv[1] == "-c":
            g.create()

        elif sys.argv[1] == "-r" and len(sys.argv) == 3:
            g.read_key(sys.argv[2])   
     
        elif sys.argv[1] == "-w":
            g.write_key()

# encrypted data below this line
